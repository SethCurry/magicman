// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/set"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MultiverseID holds the value of the "multiverse_id" field.
	MultiverseID string `json:"multiverse_id,omitempty"`
	// GathererID holds the value of the "gatherer_id" field.
	GathererID string `json:"gatherer_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Cmc holds the value of the "cmc" field.
	Cmc int `json:"cmc,omitempty"`
	// ManaCost holds the value of the "mana_cost" field.
	ManaCost string `json:"mana_cost,omitempty"`
	// Artist holds the value of the "artist" field.
	Artist string `json:"artist,omitempty"`
	// Power holds the value of the "power" field.
	Power string `json:"power,omitempty"`
	// Toughness holds the value of the "toughness" field.
	Toughness string `json:"toughness,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// OriginalText holds the value of the "original_text" field.
	OriginalText string `json:"original_text,omitempty"`
	// OriginalType holds the value of the "original_type" field.
	OriginalType string `json:"original_type,omitempty"`
	// CachedImagePath holds the value of the "cached_image_path" field.
	CachedImagePath *string `json:"cached_image_path,omitempty"`
	// Rarity holds the value of the "rarity" field.
	Rarity string `json:"rarity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardQuery when eager-loading is set.
	Edges     CardEdges `json:"edges"`
	set_cards *int
}

// CardEdges holds the relations/edges for other nodes in the graph.
type CardEdges struct {
	// Rulings holds the value of the rulings edge.
	Rulings []*Ruling `json:"rulings,omitempty"`
	// Set holds the value of the set edge.
	Set *Set `json:"set,omitempty"`
	// Types holds the value of the types edge.
	Types []*CardType `json:"types,omitempty"`
	// Subtypes holds the value of the subtypes edge.
	Subtypes []*SubType `json:"subtypes,omitempty"`
	// Supertypes holds the value of the supertypes edge.
	Supertypes []*SuperType `json:"supertypes,omitempty"`
	// Colors holds the value of the colors edge.
	Colors []*Color `json:"colors,omitempty"`
	// DeckCards holds the value of the deck_cards edge.
	DeckCards []*DeckCard `json:"deck_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// RulingsOrErr returns the Rulings value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) RulingsOrErr() ([]*Ruling, error) {
	if e.loadedTypes[0] {
		return e.Rulings, nil
	}
	return nil, &NotLoadedError{edge: "rulings"}
}

// SetOrErr returns the Set value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) SetOrErr() (*Set, error) {
	if e.loadedTypes[1] {
		if e.Set == nil {
			// The edge set was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: set.Label}
		}
		return e.Set, nil
	}
	return nil, &NotLoadedError{edge: "set"}
}

// TypesOrErr returns the Types value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) TypesOrErr() ([]*CardType, error) {
	if e.loadedTypes[2] {
		return e.Types, nil
	}
	return nil, &NotLoadedError{edge: "types"}
}

// SubtypesOrErr returns the Subtypes value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) SubtypesOrErr() ([]*SubType, error) {
	if e.loadedTypes[3] {
		return e.Subtypes, nil
	}
	return nil, &NotLoadedError{edge: "subtypes"}
}

// SupertypesOrErr returns the Supertypes value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) SupertypesOrErr() ([]*SuperType, error) {
	if e.loadedTypes[4] {
		return e.Supertypes, nil
	}
	return nil, &NotLoadedError{edge: "supertypes"}
}

// ColorsOrErr returns the Colors value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) ColorsOrErr() ([]*Color, error) {
	if e.loadedTypes[5] {
		return e.Colors, nil
	}
	return nil, &NotLoadedError{edge: "colors"}
}

// DeckCardsOrErr returns the DeckCards value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) DeckCardsOrErr() ([]*DeckCard, error) {
	if e.loadedTypes[6] {
		return e.DeckCards, nil
	}
	return nil, &NotLoadedError{edge: "deck_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldID, card.FieldCmc:
			values[i] = new(sql.NullInt64)
		case card.FieldMultiverseID, card.FieldGathererID, card.FieldName, card.FieldType, card.FieldText, card.FieldManaCost, card.FieldArtist, card.FieldPower, card.FieldToughness, card.FieldImageURL, card.FieldOriginalText, card.FieldOriginalType, card.FieldCachedImagePath, card.FieldRarity:
			values[i] = new(sql.NullString)
		case card.ForeignKeys[0]: // set_cards
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Card", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case card.FieldMultiverseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field multiverse_id", values[i])
			} else if value.Valid {
				c.MultiverseID = value.String
			}
		case card.FieldGathererID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gatherer_id", values[i])
			} else if value.Valid {
				c.GathererID = value.String
			}
		case card.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case card.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case card.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				c.Text = value.String
			}
		case card.FieldCmc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cmc", values[i])
			} else if value.Valid {
				c.Cmc = int(value.Int64)
			}
		case card.FieldManaCost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mana_cost", values[i])
			} else if value.Valid {
				c.ManaCost = value.String
			}
		case card.FieldArtist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[i])
			} else if value.Valid {
				c.Artist = value.String
			}
		case card.FieldPower:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power", values[i])
			} else if value.Valid {
				c.Power = value.String
			}
		case card.FieldToughness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field toughness", values[i])
			} else if value.Valid {
				c.Toughness = value.String
			}
		case card.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				c.ImageURL = value.String
			}
		case card.FieldOriginalText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_text", values[i])
			} else if value.Valid {
				c.OriginalText = value.String
			}
		case card.FieldOriginalType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_type", values[i])
			} else if value.Valid {
				c.OriginalType = value.String
			}
		case card.FieldCachedImagePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cached_image_path", values[i])
			} else if value.Valid {
				c.CachedImagePath = new(string)
				*c.CachedImagePath = value.String
			}
		case card.FieldRarity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rarity", values[i])
			} else if value.Valid {
				c.Rarity = value.String
			}
		case card.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field set_cards", value)
			} else if value.Valid {
				c.set_cards = new(int)
				*c.set_cards = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRulings queries the "rulings" edge of the Card entity.
func (c *Card) QueryRulings() *RulingQuery {
	return (&CardClient{config: c.config}).QueryRulings(c)
}

// QuerySet queries the "set" edge of the Card entity.
func (c *Card) QuerySet() *SetQuery {
	return (&CardClient{config: c.config}).QuerySet(c)
}

// QueryTypes queries the "types" edge of the Card entity.
func (c *Card) QueryTypes() *CardTypeQuery {
	return (&CardClient{config: c.config}).QueryTypes(c)
}

// QuerySubtypes queries the "subtypes" edge of the Card entity.
func (c *Card) QuerySubtypes() *SubTypeQuery {
	return (&CardClient{config: c.config}).QuerySubtypes(c)
}

// QuerySupertypes queries the "supertypes" edge of the Card entity.
func (c *Card) QuerySupertypes() *SuperTypeQuery {
	return (&CardClient{config: c.config}).QuerySupertypes(c)
}

// QueryColors queries the "colors" edge of the Card entity.
func (c *Card) QueryColors() *ColorQuery {
	return (&CardClient{config: c.config}).QueryColors(c)
}

// QueryDeckCards queries the "deck_cards" edge of the Card entity.
func (c *Card) QueryDeckCards() *DeckCardQuery {
	return (&CardClient{config: c.config}).QueryDeckCards(c)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return (&CardClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", multiverse_id=")
	builder.WriteString(c.MultiverseID)
	builder.WriteString(", gatherer_id=")
	builder.WriteString(c.GathererID)
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", type=")
	builder.WriteString(c.Type)
	builder.WriteString(", text=")
	builder.WriteString(c.Text)
	builder.WriteString(", cmc=")
	builder.WriteString(fmt.Sprintf("%v", c.Cmc))
	builder.WriteString(", mana_cost=")
	builder.WriteString(c.ManaCost)
	builder.WriteString(", artist=")
	builder.WriteString(c.Artist)
	builder.WriteString(", power=")
	builder.WriteString(c.Power)
	builder.WriteString(", toughness=")
	builder.WriteString(c.Toughness)
	builder.WriteString(", image_url=")
	builder.WriteString(c.ImageURL)
	builder.WriteString(", original_text=")
	builder.WriteString(c.OriginalText)
	builder.WriteString(", original_type=")
	builder.WriteString(c.OriginalType)
	if v := c.CachedImagePath; v != nil {
		builder.WriteString(", cached_image_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", rarity=")
	builder.WriteString(c.Rarity)
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card

func (c Cards) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
