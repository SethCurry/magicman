// Code generated by entc, DO NOT EDIT.

package card

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMultiverseID holds the string denoting the multiverse_id field in the database.
	FieldMultiverseID = "multiverse_id"
	// FieldGathererID holds the string denoting the gatherer_id field in the database.
	FieldGathererID = "gatherer_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldCmc holds the string denoting the cmc field in the database.
	FieldCmc = "cmc"
	// FieldManaCost holds the string denoting the mana_cost field in the database.
	FieldManaCost = "mana_cost"
	// FieldArtist holds the string denoting the artist field in the database.
	FieldArtist = "artist"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldToughness holds the string denoting the toughness field in the database.
	FieldToughness = "toughness"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldOriginalText holds the string denoting the original_text field in the database.
	FieldOriginalText = "original_text"
	// FieldOriginalType holds the string denoting the original_type field in the database.
	FieldOriginalType = "original_type"
	// FieldCachedImagePath holds the string denoting the cached_image_path field in the database.
	FieldCachedImagePath = "cached_image_path"
	// FieldRarity holds the string denoting the rarity field in the database.
	FieldRarity = "rarity"
	// EdgeRulings holds the string denoting the rulings edge name in mutations.
	EdgeRulings = "rulings"
	// EdgeSet holds the string denoting the set edge name in mutations.
	EdgeSet = "set"
	// EdgeTypes holds the string denoting the types edge name in mutations.
	EdgeTypes = "types"
	// EdgeSubtypes holds the string denoting the subtypes edge name in mutations.
	EdgeSubtypes = "subtypes"
	// EdgeSupertypes holds the string denoting the supertypes edge name in mutations.
	EdgeSupertypes = "supertypes"
	// EdgeColors holds the string denoting the colors edge name in mutations.
	EdgeColors = "colors"
	// EdgeDeckCards holds the string denoting the deck_cards edge name in mutations.
	EdgeDeckCards = "deck_cards"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// RulingsTable is the table that holds the rulings relation/edge.
	RulingsTable = "rulings"
	// RulingsInverseTable is the table name for the Ruling entity.
	// It exists in this package in order to avoid circular dependency with the "ruling" package.
	RulingsInverseTable = "rulings"
	// RulingsColumn is the table column denoting the rulings relation/edge.
	RulingsColumn = "card_rulings"
	// SetTable is the table that holds the set relation/edge.
	SetTable = "cards"
	// SetInverseTable is the table name for the Set entity.
	// It exists in this package in order to avoid circular dependency with the "set" package.
	SetInverseTable = "sets"
	// SetColumn is the table column denoting the set relation/edge.
	SetColumn = "set_cards"
	// TypesTable is the table that holds the types relation/edge. The primary key declared below.
	TypesTable = "card_type_cards"
	// TypesInverseTable is the table name for the CardType entity.
	// It exists in this package in order to avoid circular dependency with the "cardtype" package.
	TypesInverseTable = "card_types"
	// SubtypesTable is the table that holds the subtypes relation/edge. The primary key declared below.
	SubtypesTable = "sub_type_cards"
	// SubtypesInverseTable is the table name for the SubType entity.
	// It exists in this package in order to avoid circular dependency with the "subtype" package.
	SubtypesInverseTable = "sub_types"
	// SupertypesTable is the table that holds the supertypes relation/edge. The primary key declared below.
	SupertypesTable = "super_type_cards"
	// SupertypesInverseTable is the table name for the SuperType entity.
	// It exists in this package in order to avoid circular dependency with the "supertype" package.
	SupertypesInverseTable = "super_types"
	// ColorsTable is the table that holds the colors relation/edge. The primary key declared below.
	ColorsTable = "color_cards"
	// ColorsInverseTable is the table name for the Color entity.
	// It exists in this package in order to avoid circular dependency with the "color" package.
	ColorsInverseTable = "colors"
	// DeckCardsTable is the table that holds the deck_cards relation/edge.
	DeckCardsTable = "deck_cards"
	// DeckCardsInverseTable is the table name for the DeckCard entity.
	// It exists in this package in order to avoid circular dependency with the "deckcard" package.
	DeckCardsInverseTable = "deck_cards"
	// DeckCardsColumn is the table column denoting the deck_cards relation/edge.
	DeckCardsColumn = "card_deck_cards"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldMultiverseID,
	FieldGathererID,
	FieldName,
	FieldType,
	FieldText,
	FieldCmc,
	FieldManaCost,
	FieldArtist,
	FieldPower,
	FieldToughness,
	FieldImageURL,
	FieldOriginalText,
	FieldOriginalType,
	FieldCachedImagePath,
	FieldRarity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"set_cards",
}

var (
	// TypesPrimaryKey and TypesColumn2 are the table columns denoting the
	// primary key for the types relation (M2M).
	TypesPrimaryKey = []string{"card_type_id", "card_id"}
	// SubtypesPrimaryKey and SubtypesColumn2 are the table columns denoting the
	// primary key for the subtypes relation (M2M).
	SubtypesPrimaryKey = []string{"sub_type_id", "card_id"}
	// SupertypesPrimaryKey and SupertypesColumn2 are the table columns denoting the
	// primary key for the supertypes relation (M2M).
	SupertypesPrimaryKey = []string{"super_type_id", "card_id"}
	// ColorsPrimaryKey and ColorsColumn2 are the table columns denoting the
	// primary key for the colors relation (M2M).
	ColorsPrimaryKey = []string{"color_id", "card_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
