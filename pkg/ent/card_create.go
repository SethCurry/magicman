// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/cardtype"
	"github.com/SethCurry/magicman/pkg/ent/color"
	"github.com/SethCurry/magicman/pkg/ent/deckcard"
	"github.com/SethCurry/magicman/pkg/ent/ruling"
	"github.com/SethCurry/magicman/pkg/ent/set"
	"github.com/SethCurry/magicman/pkg/ent/subtype"
	"github.com/SethCurry/magicman/pkg/ent/supertype"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetMultiverseID sets the "multiverse_id" field.
func (cc *CardCreate) SetMultiverseID(s string) *CardCreate {
	cc.mutation.SetMultiverseID(s)
	return cc
}

// SetGathererID sets the "gatherer_id" field.
func (cc *CardCreate) SetGathererID(s string) *CardCreate {
	cc.mutation.SetGathererID(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CardCreate) SetName(s string) *CardCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CardCreate) SetType(s string) *CardCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetText sets the "text" field.
func (cc *CardCreate) SetText(s string) *CardCreate {
	cc.mutation.SetText(s)
	return cc
}

// SetCmc sets the "cmc" field.
func (cc *CardCreate) SetCmc(i int) *CardCreate {
	cc.mutation.SetCmc(i)
	return cc
}

// SetManaCost sets the "mana_cost" field.
func (cc *CardCreate) SetManaCost(s string) *CardCreate {
	cc.mutation.SetManaCost(s)
	return cc
}

// SetArtist sets the "artist" field.
func (cc *CardCreate) SetArtist(s string) *CardCreate {
	cc.mutation.SetArtist(s)
	return cc
}

// SetPower sets the "power" field.
func (cc *CardCreate) SetPower(s string) *CardCreate {
	cc.mutation.SetPower(s)
	return cc
}

// SetToughness sets the "toughness" field.
func (cc *CardCreate) SetToughness(s string) *CardCreate {
	cc.mutation.SetToughness(s)
	return cc
}

// SetImageURL sets the "image_url" field.
func (cc *CardCreate) SetImageURL(s string) *CardCreate {
	cc.mutation.SetImageURL(s)
	return cc
}

// SetOriginalText sets the "original_text" field.
func (cc *CardCreate) SetOriginalText(s string) *CardCreate {
	cc.mutation.SetOriginalText(s)
	return cc
}

// SetOriginalType sets the "original_type" field.
func (cc *CardCreate) SetOriginalType(s string) *CardCreate {
	cc.mutation.SetOriginalType(s)
	return cc
}

// SetCachedImagePath sets the "cached_image_path" field.
func (cc *CardCreate) SetCachedImagePath(s string) *CardCreate {
	cc.mutation.SetCachedImagePath(s)
	return cc
}

// SetNillableCachedImagePath sets the "cached_image_path" field if the given value is not nil.
func (cc *CardCreate) SetNillableCachedImagePath(s *string) *CardCreate {
	if s != nil {
		cc.SetCachedImagePath(*s)
	}
	return cc
}

// SetRarity sets the "rarity" field.
func (cc *CardCreate) SetRarity(s string) *CardCreate {
	cc.mutation.SetRarity(s)
	return cc
}

// AddRulingIDs adds the "rulings" edge to the Ruling entity by IDs.
func (cc *CardCreate) AddRulingIDs(ids ...int) *CardCreate {
	cc.mutation.AddRulingIDs(ids...)
	return cc
}

// AddRulings adds the "rulings" edges to the Ruling entity.
func (cc *CardCreate) AddRulings(r ...*Ruling) *CardCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddRulingIDs(ids...)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (cc *CardCreate) SetSetID(id int) *CardCreate {
	cc.mutation.SetSetID(id)
	return cc
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (cc *CardCreate) SetNillableSetID(id *int) *CardCreate {
	if id != nil {
		cc = cc.SetSetID(*id)
	}
	return cc
}

// SetSet sets the "set" edge to the Set entity.
func (cc *CardCreate) SetSet(s *Set) *CardCreate {
	return cc.SetSetID(s.ID)
}

// AddTypeIDs adds the "types" edge to the CardType entity by IDs.
func (cc *CardCreate) AddTypeIDs(ids ...int) *CardCreate {
	cc.mutation.AddTypeIDs(ids...)
	return cc
}

// AddTypes adds the "types" edges to the CardType entity.
func (cc *CardCreate) AddTypes(c ...*CardType) *CardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddTypeIDs(ids...)
}

// AddSubtypeIDs adds the "subtypes" edge to the SubType entity by IDs.
func (cc *CardCreate) AddSubtypeIDs(ids ...int) *CardCreate {
	cc.mutation.AddSubtypeIDs(ids...)
	return cc
}

// AddSubtypes adds the "subtypes" edges to the SubType entity.
func (cc *CardCreate) AddSubtypes(s ...*SubType) *CardCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSubtypeIDs(ids...)
}

// AddSupertypeIDs adds the "supertypes" edge to the SuperType entity by IDs.
func (cc *CardCreate) AddSupertypeIDs(ids ...int) *CardCreate {
	cc.mutation.AddSupertypeIDs(ids...)
	return cc
}

// AddSupertypes adds the "supertypes" edges to the SuperType entity.
func (cc *CardCreate) AddSupertypes(s ...*SuperType) *CardCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddSupertypeIDs(ids...)
}

// AddColorIDs adds the "colors" edge to the Color entity by IDs.
func (cc *CardCreate) AddColorIDs(ids ...int) *CardCreate {
	cc.mutation.AddColorIDs(ids...)
	return cc
}

// AddColors adds the "colors" edges to the Color entity.
func (cc *CardCreate) AddColors(c ...*Color) *CardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddColorIDs(ids...)
}

// AddDeckCardIDs adds the "deck_cards" edge to the DeckCard entity by IDs.
func (cc *CardCreate) AddDeckCardIDs(ids ...int) *CardCreate {
	cc.mutation.AddDeckCardIDs(ids...)
	return cc
}

// AddDeckCards adds the "deck_cards" edges to the DeckCard entity.
func (cc *CardCreate) AddDeckCards(d ...*DeckCard) *CardCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeckCardIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.MultiverseID(); !ok {
		return &ValidationError{Name: "multiverse_id", err: errors.New(`ent: missing required field "multiverse_id"`)}
	}
	if _, ok := cc.mutation.GathererID(); !ok {
		return &ValidationError{Name: "gatherer_id", err: errors.New(`ent: missing required field "gatherer_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if _, ok := cc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "text"`)}
	}
	if _, ok := cc.mutation.Cmc(); !ok {
		return &ValidationError{Name: "cmc", err: errors.New(`ent: missing required field "cmc"`)}
	}
	if _, ok := cc.mutation.ManaCost(); !ok {
		return &ValidationError{Name: "mana_cost", err: errors.New(`ent: missing required field "mana_cost"`)}
	}
	if _, ok := cc.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required field "artist"`)}
	}
	if _, ok := cc.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New(`ent: missing required field "power"`)}
	}
	if _, ok := cc.mutation.Toughness(); !ok {
		return &ValidationError{Name: "toughness", err: errors.New(`ent: missing required field "toughness"`)}
	}
	if _, ok := cc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "image_url"`)}
	}
	if _, ok := cc.mutation.OriginalText(); !ok {
		return &ValidationError{Name: "original_text", err: errors.New(`ent: missing required field "original_text"`)}
	}
	if _, ok := cc.mutation.OriginalType(); !ok {
		return &ValidationError{Name: "original_type", err: errors.New(`ent: missing required field "original_type"`)}
	}
	if _, ok := cc.mutation.Rarity(); !ok {
		return &ValidationError{Name: "rarity", err: errors.New(`ent: missing required field "rarity"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.MultiverseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldMultiverseID,
		})
		_node.MultiverseID = value
	}
	if value, ok := cc.mutation.GathererID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldGathererID,
		})
		_node.GathererID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldText,
		})
		_node.Text = value
	}
	if value, ok := cc.mutation.Cmc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: card.FieldCmc,
		})
		_node.Cmc = value
	}
	if value, ok := cc.mutation.ManaCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldManaCost,
		})
		_node.ManaCost = value
	}
	if value, ok := cc.mutation.Artist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldArtist,
		})
		_node.Artist = value
	}
	if value, ok := cc.mutation.Power(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldPower,
		})
		_node.Power = value
	}
	if value, ok := cc.mutation.Toughness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldToughness,
		})
		_node.Toughness = value
	}
	if value, ok := cc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := cc.mutation.OriginalText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalText,
		})
		_node.OriginalText = value
	}
	if value, ok := cc.mutation.OriginalType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalType,
		})
		_node.OriginalType = value
	}
	if value, ok := cc.mutation.CachedImagePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldCachedImagePath,
		})
		_node.CachedImagePath = &value
	}
	if value, ok := cc.mutation.Rarity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldRarity,
		})
		_node.Rarity = value
	}
	if nodes := cc.mutation.RulingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SetTable,
			Columns: []string{card.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.set_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SupertypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeckCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
