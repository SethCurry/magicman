// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/cardtype"
	"github.com/SethCurry/magicman/pkg/ent/color"
	"github.com/SethCurry/magicman/pkg/ent/deckcard"
	"github.com/SethCurry/magicman/pkg/ent/predicate"
	"github.com/SethCurry/magicman/pkg/ent/ruling"
	"github.com/SethCurry/magicman/pkg/ent/set"
	"github.com/SethCurry/magicman/pkg/ent/subtype"
	"github.com/SethCurry/magicman/pkg/ent/supertype"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMultiverseID sets the "multiverse_id" field.
func (cu *CardUpdate) SetMultiverseID(s string) *CardUpdate {
	cu.mutation.SetMultiverseID(s)
	return cu
}

// SetGathererID sets the "gatherer_id" field.
func (cu *CardUpdate) SetGathererID(s string) *CardUpdate {
	cu.mutation.SetGathererID(s)
	return cu
}

// SetName sets the "name" field.
func (cu *CardUpdate) SetName(s string) *CardUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetType sets the "type" field.
func (cu *CardUpdate) SetType(s string) *CardUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetText sets the "text" field.
func (cu *CardUpdate) SetText(s string) *CardUpdate {
	cu.mutation.SetText(s)
	return cu
}

// SetCmc sets the "cmc" field.
func (cu *CardUpdate) SetCmc(i int) *CardUpdate {
	cu.mutation.ResetCmc()
	cu.mutation.SetCmc(i)
	return cu
}

// AddCmc adds i to the "cmc" field.
func (cu *CardUpdate) AddCmc(i int) *CardUpdate {
	cu.mutation.AddCmc(i)
	return cu
}

// SetManaCost sets the "mana_cost" field.
func (cu *CardUpdate) SetManaCost(s string) *CardUpdate {
	cu.mutation.SetManaCost(s)
	return cu
}

// SetArtist sets the "artist" field.
func (cu *CardUpdate) SetArtist(s string) *CardUpdate {
	cu.mutation.SetArtist(s)
	return cu
}

// SetPower sets the "power" field.
func (cu *CardUpdate) SetPower(s string) *CardUpdate {
	cu.mutation.SetPower(s)
	return cu
}

// SetToughness sets the "toughness" field.
func (cu *CardUpdate) SetToughness(s string) *CardUpdate {
	cu.mutation.SetToughness(s)
	return cu
}

// SetImageURL sets the "image_url" field.
func (cu *CardUpdate) SetImageURL(s string) *CardUpdate {
	cu.mutation.SetImageURL(s)
	return cu
}

// SetOriginalText sets the "original_text" field.
func (cu *CardUpdate) SetOriginalText(s string) *CardUpdate {
	cu.mutation.SetOriginalText(s)
	return cu
}

// SetOriginalType sets the "original_type" field.
func (cu *CardUpdate) SetOriginalType(s string) *CardUpdate {
	cu.mutation.SetOriginalType(s)
	return cu
}

// SetCachedImagePath sets the "cached_image_path" field.
func (cu *CardUpdate) SetCachedImagePath(s string) *CardUpdate {
	cu.mutation.SetCachedImagePath(s)
	return cu
}

// SetNillableCachedImagePath sets the "cached_image_path" field if the given value is not nil.
func (cu *CardUpdate) SetNillableCachedImagePath(s *string) *CardUpdate {
	if s != nil {
		cu.SetCachedImagePath(*s)
	}
	return cu
}

// ClearCachedImagePath clears the value of the "cached_image_path" field.
func (cu *CardUpdate) ClearCachedImagePath() *CardUpdate {
	cu.mutation.ClearCachedImagePath()
	return cu
}

// SetRarity sets the "rarity" field.
func (cu *CardUpdate) SetRarity(s string) *CardUpdate {
	cu.mutation.SetRarity(s)
	return cu
}

// AddRulingIDs adds the "rulings" edge to the Ruling entity by IDs.
func (cu *CardUpdate) AddRulingIDs(ids ...int) *CardUpdate {
	cu.mutation.AddRulingIDs(ids...)
	return cu
}

// AddRulings adds the "rulings" edges to the Ruling entity.
func (cu *CardUpdate) AddRulings(r ...*Ruling) *CardUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRulingIDs(ids...)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (cu *CardUpdate) SetSetID(id int) *CardUpdate {
	cu.mutation.SetSetID(id)
	return cu
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (cu *CardUpdate) SetNillableSetID(id *int) *CardUpdate {
	if id != nil {
		cu = cu.SetSetID(*id)
	}
	return cu
}

// SetSet sets the "set" edge to the Set entity.
func (cu *CardUpdate) SetSet(s *Set) *CardUpdate {
	return cu.SetSetID(s.ID)
}

// AddTypeIDs adds the "types" edge to the CardType entity by IDs.
func (cu *CardUpdate) AddTypeIDs(ids ...int) *CardUpdate {
	cu.mutation.AddTypeIDs(ids...)
	return cu
}

// AddTypes adds the "types" edges to the CardType entity.
func (cu *CardUpdate) AddTypes(c ...*CardType) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddTypeIDs(ids...)
}

// AddSubtypeIDs adds the "subtypes" edge to the SubType entity by IDs.
func (cu *CardUpdate) AddSubtypeIDs(ids ...int) *CardUpdate {
	cu.mutation.AddSubtypeIDs(ids...)
	return cu
}

// AddSubtypes adds the "subtypes" edges to the SubType entity.
func (cu *CardUpdate) AddSubtypes(s ...*SubType) *CardUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSubtypeIDs(ids...)
}

// AddSupertypeIDs adds the "supertypes" edge to the SuperType entity by IDs.
func (cu *CardUpdate) AddSupertypeIDs(ids ...int) *CardUpdate {
	cu.mutation.AddSupertypeIDs(ids...)
	return cu
}

// AddSupertypes adds the "supertypes" edges to the SuperType entity.
func (cu *CardUpdate) AddSupertypes(s ...*SuperType) *CardUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSupertypeIDs(ids...)
}

// AddColorIDs adds the "colors" edge to the Color entity by IDs.
func (cu *CardUpdate) AddColorIDs(ids ...int) *CardUpdate {
	cu.mutation.AddColorIDs(ids...)
	return cu
}

// AddColors adds the "colors" edges to the Color entity.
func (cu *CardUpdate) AddColors(c ...*Color) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddColorIDs(ids...)
}

// AddDeckCardIDs adds the "deck_cards" edge to the DeckCard entity by IDs.
func (cu *CardUpdate) AddDeckCardIDs(ids ...int) *CardUpdate {
	cu.mutation.AddDeckCardIDs(ids...)
	return cu
}

// AddDeckCards adds the "deck_cards" edges to the DeckCard entity.
func (cu *CardUpdate) AddDeckCards(d ...*DeckCard) *CardUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeckCardIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// ClearRulings clears all "rulings" edges to the Ruling entity.
func (cu *CardUpdate) ClearRulings() *CardUpdate {
	cu.mutation.ClearRulings()
	return cu
}

// RemoveRulingIDs removes the "rulings" edge to Ruling entities by IDs.
func (cu *CardUpdate) RemoveRulingIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveRulingIDs(ids...)
	return cu
}

// RemoveRulings removes "rulings" edges to Ruling entities.
func (cu *CardUpdate) RemoveRulings(r ...*Ruling) *CardUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRulingIDs(ids...)
}

// ClearSet clears the "set" edge to the Set entity.
func (cu *CardUpdate) ClearSet() *CardUpdate {
	cu.mutation.ClearSet()
	return cu
}

// ClearTypes clears all "types" edges to the CardType entity.
func (cu *CardUpdate) ClearTypes() *CardUpdate {
	cu.mutation.ClearTypes()
	return cu
}

// RemoveTypeIDs removes the "types" edge to CardType entities by IDs.
func (cu *CardUpdate) RemoveTypeIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveTypeIDs(ids...)
	return cu
}

// RemoveTypes removes "types" edges to CardType entities.
func (cu *CardUpdate) RemoveTypes(c ...*CardType) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveTypeIDs(ids...)
}

// ClearSubtypes clears all "subtypes" edges to the SubType entity.
func (cu *CardUpdate) ClearSubtypes() *CardUpdate {
	cu.mutation.ClearSubtypes()
	return cu
}

// RemoveSubtypeIDs removes the "subtypes" edge to SubType entities by IDs.
func (cu *CardUpdate) RemoveSubtypeIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveSubtypeIDs(ids...)
	return cu
}

// RemoveSubtypes removes "subtypes" edges to SubType entities.
func (cu *CardUpdate) RemoveSubtypes(s ...*SubType) *CardUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSubtypeIDs(ids...)
}

// ClearSupertypes clears all "supertypes" edges to the SuperType entity.
func (cu *CardUpdate) ClearSupertypes() *CardUpdate {
	cu.mutation.ClearSupertypes()
	return cu
}

// RemoveSupertypeIDs removes the "supertypes" edge to SuperType entities by IDs.
func (cu *CardUpdate) RemoveSupertypeIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveSupertypeIDs(ids...)
	return cu
}

// RemoveSupertypes removes "supertypes" edges to SuperType entities.
func (cu *CardUpdate) RemoveSupertypes(s ...*SuperType) *CardUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSupertypeIDs(ids...)
}

// ClearColors clears all "colors" edges to the Color entity.
func (cu *CardUpdate) ClearColors() *CardUpdate {
	cu.mutation.ClearColors()
	return cu
}

// RemoveColorIDs removes the "colors" edge to Color entities by IDs.
func (cu *CardUpdate) RemoveColorIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveColorIDs(ids...)
	return cu
}

// RemoveColors removes "colors" edges to Color entities.
func (cu *CardUpdate) RemoveColors(c ...*Color) *CardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveColorIDs(ids...)
}

// ClearDeckCards clears all "deck_cards" edges to the DeckCard entity.
func (cu *CardUpdate) ClearDeckCards() *CardUpdate {
	cu.mutation.ClearDeckCards()
	return cu
}

// RemoveDeckCardIDs removes the "deck_cards" edge to DeckCard entities by IDs.
func (cu *CardUpdate) RemoveDeckCardIDs(ids ...int) *CardUpdate {
	cu.mutation.RemoveDeckCardIDs(ids...)
	return cu
}

// RemoveDeckCards removes "deck_cards" edges to DeckCard entities.
func (cu *CardUpdate) RemoveDeckCards(d ...*DeckCard) *CardUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeckCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.MultiverseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldMultiverseID,
		})
	}
	if value, ok := cu.mutation.GathererID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldGathererID,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldName,
		})
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldType,
		})
	}
	if value, ok := cu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldText,
		})
	}
	if value, ok := cu.mutation.Cmc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: card.FieldCmc,
		})
	}
	if value, ok := cu.mutation.AddedCmc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: card.FieldCmc,
		})
	}
	if value, ok := cu.mutation.ManaCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldManaCost,
		})
	}
	if value, ok := cu.mutation.Artist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldArtist,
		})
	}
	if value, ok := cu.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldPower,
		})
	}
	if value, ok := cu.mutation.Toughness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldToughness,
		})
	}
	if value, ok := cu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldImageURL,
		})
	}
	if value, ok := cu.mutation.OriginalText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalText,
		})
	}
	if value, ok := cu.mutation.OriginalType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalType,
		})
	}
	if value, ok := cu.mutation.CachedImagePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldCachedImagePath,
		})
	}
	if cu.mutation.CachedImagePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: card.FieldCachedImagePath,
		})
	}
	if value, ok := cu.mutation.Rarity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldRarity,
		})
	}
	if cu.mutation.RulingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRulingsIDs(); len(nodes) > 0 && !cu.mutation.RulingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RulingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SetTable,
			Columns: []string{card.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SetTable,
			Columns: []string{card.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTypesIDs(); len(nodes) > 0 && !cu.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSubtypesIDs(); len(nodes) > 0 && !cu.mutation.SubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SupertypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSupertypesIDs(); len(nodes) > 0 && !cu.mutation.SupertypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SupertypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedColorsIDs(); len(nodes) > 0 && !cu.mutation.ColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeckCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeckCardsIDs(); len(nodes) > 0 && !cu.mutation.DeckCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeckCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetMultiverseID sets the "multiverse_id" field.
func (cuo *CardUpdateOne) SetMultiverseID(s string) *CardUpdateOne {
	cuo.mutation.SetMultiverseID(s)
	return cuo
}

// SetGathererID sets the "gatherer_id" field.
func (cuo *CardUpdateOne) SetGathererID(s string) *CardUpdateOne {
	cuo.mutation.SetGathererID(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CardUpdateOne) SetName(s string) *CardUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetType sets the "type" field.
func (cuo *CardUpdateOne) SetType(s string) *CardUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetText sets the "text" field.
func (cuo *CardUpdateOne) SetText(s string) *CardUpdateOne {
	cuo.mutation.SetText(s)
	return cuo
}

// SetCmc sets the "cmc" field.
func (cuo *CardUpdateOne) SetCmc(i int) *CardUpdateOne {
	cuo.mutation.ResetCmc()
	cuo.mutation.SetCmc(i)
	return cuo
}

// AddCmc adds i to the "cmc" field.
func (cuo *CardUpdateOne) AddCmc(i int) *CardUpdateOne {
	cuo.mutation.AddCmc(i)
	return cuo
}

// SetManaCost sets the "mana_cost" field.
func (cuo *CardUpdateOne) SetManaCost(s string) *CardUpdateOne {
	cuo.mutation.SetManaCost(s)
	return cuo
}

// SetArtist sets the "artist" field.
func (cuo *CardUpdateOne) SetArtist(s string) *CardUpdateOne {
	cuo.mutation.SetArtist(s)
	return cuo
}

// SetPower sets the "power" field.
func (cuo *CardUpdateOne) SetPower(s string) *CardUpdateOne {
	cuo.mutation.SetPower(s)
	return cuo
}

// SetToughness sets the "toughness" field.
func (cuo *CardUpdateOne) SetToughness(s string) *CardUpdateOne {
	cuo.mutation.SetToughness(s)
	return cuo
}

// SetImageURL sets the "image_url" field.
func (cuo *CardUpdateOne) SetImageURL(s string) *CardUpdateOne {
	cuo.mutation.SetImageURL(s)
	return cuo
}

// SetOriginalText sets the "original_text" field.
func (cuo *CardUpdateOne) SetOriginalText(s string) *CardUpdateOne {
	cuo.mutation.SetOriginalText(s)
	return cuo
}

// SetOriginalType sets the "original_type" field.
func (cuo *CardUpdateOne) SetOriginalType(s string) *CardUpdateOne {
	cuo.mutation.SetOriginalType(s)
	return cuo
}

// SetCachedImagePath sets the "cached_image_path" field.
func (cuo *CardUpdateOne) SetCachedImagePath(s string) *CardUpdateOne {
	cuo.mutation.SetCachedImagePath(s)
	return cuo
}

// SetNillableCachedImagePath sets the "cached_image_path" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableCachedImagePath(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetCachedImagePath(*s)
	}
	return cuo
}

// ClearCachedImagePath clears the value of the "cached_image_path" field.
func (cuo *CardUpdateOne) ClearCachedImagePath() *CardUpdateOne {
	cuo.mutation.ClearCachedImagePath()
	return cuo
}

// SetRarity sets the "rarity" field.
func (cuo *CardUpdateOne) SetRarity(s string) *CardUpdateOne {
	cuo.mutation.SetRarity(s)
	return cuo
}

// AddRulingIDs adds the "rulings" edge to the Ruling entity by IDs.
func (cuo *CardUpdateOne) AddRulingIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddRulingIDs(ids...)
	return cuo
}

// AddRulings adds the "rulings" edges to the Ruling entity.
func (cuo *CardUpdateOne) AddRulings(r ...*Ruling) *CardUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRulingIDs(ids...)
}

// SetSetID sets the "set" edge to the Set entity by ID.
func (cuo *CardUpdateOne) SetSetID(id int) *CardUpdateOne {
	cuo.mutation.SetSetID(id)
	return cuo
}

// SetNillableSetID sets the "set" edge to the Set entity by ID if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableSetID(id *int) *CardUpdateOne {
	if id != nil {
		cuo = cuo.SetSetID(*id)
	}
	return cuo
}

// SetSet sets the "set" edge to the Set entity.
func (cuo *CardUpdateOne) SetSet(s *Set) *CardUpdateOne {
	return cuo.SetSetID(s.ID)
}

// AddTypeIDs adds the "types" edge to the CardType entity by IDs.
func (cuo *CardUpdateOne) AddTypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddTypeIDs(ids...)
	return cuo
}

// AddTypes adds the "types" edges to the CardType entity.
func (cuo *CardUpdateOne) AddTypes(c ...*CardType) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddTypeIDs(ids...)
}

// AddSubtypeIDs adds the "subtypes" edge to the SubType entity by IDs.
func (cuo *CardUpdateOne) AddSubtypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddSubtypeIDs(ids...)
	return cuo
}

// AddSubtypes adds the "subtypes" edges to the SubType entity.
func (cuo *CardUpdateOne) AddSubtypes(s ...*SubType) *CardUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSubtypeIDs(ids...)
}

// AddSupertypeIDs adds the "supertypes" edge to the SuperType entity by IDs.
func (cuo *CardUpdateOne) AddSupertypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddSupertypeIDs(ids...)
	return cuo
}

// AddSupertypes adds the "supertypes" edges to the SuperType entity.
func (cuo *CardUpdateOne) AddSupertypes(s ...*SuperType) *CardUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSupertypeIDs(ids...)
}

// AddColorIDs adds the "colors" edge to the Color entity by IDs.
func (cuo *CardUpdateOne) AddColorIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddColorIDs(ids...)
	return cuo
}

// AddColors adds the "colors" edges to the Color entity.
func (cuo *CardUpdateOne) AddColors(c ...*Color) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddColorIDs(ids...)
}

// AddDeckCardIDs adds the "deck_cards" edge to the DeckCard entity by IDs.
func (cuo *CardUpdateOne) AddDeckCardIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddDeckCardIDs(ids...)
	return cuo
}

// AddDeckCards adds the "deck_cards" edges to the DeckCard entity.
func (cuo *CardUpdateOne) AddDeckCards(d ...*DeckCard) *CardUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeckCardIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// ClearRulings clears all "rulings" edges to the Ruling entity.
func (cuo *CardUpdateOne) ClearRulings() *CardUpdateOne {
	cuo.mutation.ClearRulings()
	return cuo
}

// RemoveRulingIDs removes the "rulings" edge to Ruling entities by IDs.
func (cuo *CardUpdateOne) RemoveRulingIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveRulingIDs(ids...)
	return cuo
}

// RemoveRulings removes "rulings" edges to Ruling entities.
func (cuo *CardUpdateOne) RemoveRulings(r ...*Ruling) *CardUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRulingIDs(ids...)
}

// ClearSet clears the "set" edge to the Set entity.
func (cuo *CardUpdateOne) ClearSet() *CardUpdateOne {
	cuo.mutation.ClearSet()
	return cuo
}

// ClearTypes clears all "types" edges to the CardType entity.
func (cuo *CardUpdateOne) ClearTypes() *CardUpdateOne {
	cuo.mutation.ClearTypes()
	return cuo
}

// RemoveTypeIDs removes the "types" edge to CardType entities by IDs.
func (cuo *CardUpdateOne) RemoveTypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveTypeIDs(ids...)
	return cuo
}

// RemoveTypes removes "types" edges to CardType entities.
func (cuo *CardUpdateOne) RemoveTypes(c ...*CardType) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveTypeIDs(ids...)
}

// ClearSubtypes clears all "subtypes" edges to the SubType entity.
func (cuo *CardUpdateOne) ClearSubtypes() *CardUpdateOne {
	cuo.mutation.ClearSubtypes()
	return cuo
}

// RemoveSubtypeIDs removes the "subtypes" edge to SubType entities by IDs.
func (cuo *CardUpdateOne) RemoveSubtypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveSubtypeIDs(ids...)
	return cuo
}

// RemoveSubtypes removes "subtypes" edges to SubType entities.
func (cuo *CardUpdateOne) RemoveSubtypes(s ...*SubType) *CardUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSubtypeIDs(ids...)
}

// ClearSupertypes clears all "supertypes" edges to the SuperType entity.
func (cuo *CardUpdateOne) ClearSupertypes() *CardUpdateOne {
	cuo.mutation.ClearSupertypes()
	return cuo
}

// RemoveSupertypeIDs removes the "supertypes" edge to SuperType entities by IDs.
func (cuo *CardUpdateOne) RemoveSupertypeIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveSupertypeIDs(ids...)
	return cuo
}

// RemoveSupertypes removes "supertypes" edges to SuperType entities.
func (cuo *CardUpdateOne) RemoveSupertypes(s ...*SuperType) *CardUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSupertypeIDs(ids...)
}

// ClearColors clears all "colors" edges to the Color entity.
func (cuo *CardUpdateOne) ClearColors() *CardUpdateOne {
	cuo.mutation.ClearColors()
	return cuo
}

// RemoveColorIDs removes the "colors" edge to Color entities by IDs.
func (cuo *CardUpdateOne) RemoveColorIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveColorIDs(ids...)
	return cuo
}

// RemoveColors removes "colors" edges to Color entities.
func (cuo *CardUpdateOne) RemoveColors(c ...*Color) *CardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveColorIDs(ids...)
}

// ClearDeckCards clears all "deck_cards" edges to the DeckCard entity.
func (cuo *CardUpdateOne) ClearDeckCards() *CardUpdateOne {
	cuo.mutation.ClearDeckCards()
	return cuo
}

// RemoveDeckCardIDs removes the "deck_cards" edge to DeckCard entities by IDs.
func (cuo *CardUpdateOne) RemoveDeckCardIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemoveDeckCardIDs(ids...)
	return cuo
}

// RemoveDeckCards removes "deck_cards" edges to DeckCard entities.
func (cuo *CardUpdateOne) RemoveDeckCards(d ...*DeckCard) *CardUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeckCardIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Card.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.MultiverseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldMultiverseID,
		})
	}
	if value, ok := cuo.mutation.GathererID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldGathererID,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldName,
		})
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldType,
		})
	}
	if value, ok := cuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldText,
		})
	}
	if value, ok := cuo.mutation.Cmc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: card.FieldCmc,
		})
	}
	if value, ok := cuo.mutation.AddedCmc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: card.FieldCmc,
		})
	}
	if value, ok := cuo.mutation.ManaCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldManaCost,
		})
	}
	if value, ok := cuo.mutation.Artist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldArtist,
		})
	}
	if value, ok := cuo.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldPower,
		})
	}
	if value, ok := cuo.mutation.Toughness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldToughness,
		})
	}
	if value, ok := cuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldImageURL,
		})
	}
	if value, ok := cuo.mutation.OriginalText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalText,
		})
	}
	if value, ok := cuo.mutation.OriginalType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldOriginalType,
		})
	}
	if value, ok := cuo.mutation.CachedImagePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldCachedImagePath,
		})
	}
	if cuo.mutation.CachedImagePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: card.FieldCachedImagePath,
		})
	}
	if value, ok := cuo.mutation.Rarity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldRarity,
		})
	}
	if cuo.mutation.RulingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRulingsIDs(); len(nodes) > 0 && !cuo.mutation.RulingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RulingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.RulingsTable,
			Columns: []string{card.RulingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruling.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SetTable,
			Columns: []string{card.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SetTable,
			Columns: []string{card.SetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: set.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTypesIDs(); len(nodes) > 0 && !cuo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.TypesTable,
			Columns: card.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSubtypesIDs(); len(nodes) > 0 && !cuo.mutation.SubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SubtypesTable,
			Columns: card.SubtypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SupertypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSupertypesIDs(); len(nodes) > 0 && !cuo.mutation.SupertypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SupertypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.SupertypesTable,
			Columns: card.SupertypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedColorsIDs(); len(nodes) > 0 && !cuo.mutation.ColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   card.ColorsTable,
			Columns: card.ColorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeckCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeckCardsIDs(); len(nodes) > 0 && !cuo.mutation.DeckCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeckCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.DeckCardsTable,
			Columns: []string{card.DeckCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckcard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
