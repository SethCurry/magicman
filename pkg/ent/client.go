// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/SethCurry/magicman/pkg/ent/migrate"

	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/cardtype"
	"github.com/SethCurry/magicman/pkg/ent/color"
	"github.com/SethCurry/magicman/pkg/ent/deck"
	"github.com/SethCurry/magicman/pkg/ent/deckcard"
	"github.com/SethCurry/magicman/pkg/ent/ruling"
	"github.com/SethCurry/magicman/pkg/ent/set"
	"github.com/SethCurry/magicman/pkg/ent/subtype"
	"github.com/SethCurry/magicman/pkg/ent/supertype"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// CardType is the client for interacting with the CardType builders.
	CardType *CardTypeClient
	// Color is the client for interacting with the Color builders.
	Color *ColorClient
	// Deck is the client for interacting with the Deck builders.
	Deck *DeckClient
	// DeckCard is the client for interacting with the DeckCard builders.
	DeckCard *DeckCardClient
	// Ruling is the client for interacting with the Ruling builders.
	Ruling *RulingClient
	// Set is the client for interacting with the Set builders.
	Set *SetClient
	// SubType is the client for interacting with the SubType builders.
	SubType *SubTypeClient
	// SuperType is the client for interacting with the SuperType builders.
	SuperType *SuperTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Card = NewCardClient(c.config)
	c.CardType = NewCardTypeClient(c.config)
	c.Color = NewColorClient(c.config)
	c.Deck = NewDeckClient(c.config)
	c.DeckCard = NewDeckCardClient(c.config)
	c.Ruling = NewRulingClient(c.config)
	c.Set = NewSetClient(c.config)
	c.SubType = NewSubTypeClient(c.config)
	c.SuperType = NewSuperTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Card:      NewCardClient(cfg),
		CardType:  NewCardTypeClient(cfg),
		Color:     NewColorClient(cfg),
		Deck:      NewDeckClient(cfg),
		DeckCard:  NewDeckCardClient(cfg),
		Ruling:    NewRulingClient(cfg),
		Set:       NewSetClient(cfg),
		SubType:   NewSubTypeClient(cfg),
		SuperType: NewSuperTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Card:      NewCardClient(cfg),
		CardType:  NewCardTypeClient(cfg),
		Color:     NewColorClient(cfg),
		Deck:      NewDeckClient(cfg),
		DeckCard:  NewDeckCardClient(cfg),
		Ruling:    NewRulingClient(cfg),
		Set:       NewSetClient(cfg),
		SubType:   NewSubTypeClient(cfg),
		SuperType: NewSuperTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Card.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Card.Use(hooks...)
	c.CardType.Use(hooks...)
	c.Color.Use(hooks...)
	c.Deck.Use(hooks...)
	c.DeckCard.Use(hooks...)
	c.Ruling.Use(hooks...)
	c.Set.Use(hooks...)
	c.SubType.Use(hooks...)
	c.SuperType.Use(hooks...)
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Create returns a create builder for Card.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id int) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CardClient) DeleteOneID(id int) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{
		config: c.config,
	}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id int) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id int) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRulings queries the rulings edge of a Card.
func (c *CardClient) QueryRulings(ca *Card) *RulingQuery {
	query := &RulingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(ruling.Table, ruling.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, card.RulingsTable, card.RulingsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySet queries the set edge of a Card.
func (c *CardClient) QuerySet(ca *Card) *SetQuery {
	query := &SetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(set.Table, set.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.SetTable, card.SetColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypes queries the types edge of a Card.
func (c *CardClient) QueryTypes(ca *Card) *CardTypeQuery {
	query := &CardTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(cardtype.Table, cardtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.TypesTable, card.TypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubtypes queries the subtypes edge of a Card.
func (c *CardClient) QuerySubtypes(ca *Card) *SubTypeQuery {
	query := &SubTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(subtype.Table, subtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.SubtypesTable, card.SubtypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupertypes queries the supertypes edge of a Card.
func (c *CardClient) QuerySupertypes(ca *Card) *SuperTypeQuery {
	query := &SuperTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(supertype.Table, supertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.SupertypesTable, card.SupertypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColors queries the colors edge of a Card.
func (c *CardClient) QueryColors(ca *Card) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, card.ColorsTable, card.ColorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeckCards queries the deck_cards edge of a Card.
func (c *CardClient) QueryDeckCards(ca *Card) *DeckCardQuery {
	query := &DeckCardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(deckcard.Table, deckcard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, card.DeckCardsTable, card.DeckCardsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// CardTypeClient is a client for the CardType schema.
type CardTypeClient struct {
	config
}

// NewCardTypeClient returns a client for the CardType from the given config.
func NewCardTypeClient(c config) *CardTypeClient {
	return &CardTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cardtype.Hooks(f(g(h())))`.
func (c *CardTypeClient) Use(hooks ...Hook) {
	c.hooks.CardType = append(c.hooks.CardType, hooks...)
}

// Create returns a create builder for CardType.
func (c *CardTypeClient) Create() *CardTypeCreate {
	mutation := newCardTypeMutation(c.config, OpCreate)
	return &CardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CardType entities.
func (c *CardTypeClient) CreateBulk(builders ...*CardTypeCreate) *CardTypeCreateBulk {
	return &CardTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CardType.
func (c *CardTypeClient) Update() *CardTypeUpdate {
	mutation := newCardTypeMutation(c.config, OpUpdate)
	return &CardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardTypeClient) UpdateOne(ct *CardType) *CardTypeUpdateOne {
	mutation := newCardTypeMutation(c.config, OpUpdateOne, withCardType(ct))
	return &CardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardTypeClient) UpdateOneID(id int) *CardTypeUpdateOne {
	mutation := newCardTypeMutation(c.config, OpUpdateOne, withCardTypeID(id))
	return &CardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CardType.
func (c *CardTypeClient) Delete() *CardTypeDelete {
	mutation := newCardTypeMutation(c.config, OpDelete)
	return &CardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CardTypeClient) DeleteOne(ct *CardType) *CardTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CardTypeClient) DeleteOneID(id int) *CardTypeDeleteOne {
	builder := c.Delete().Where(cardtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardTypeDeleteOne{builder}
}

// Query returns a query builder for CardType.
func (c *CardTypeClient) Query() *CardTypeQuery {
	return &CardTypeQuery{
		config: c.config,
	}
}

// Get returns a CardType entity by its id.
func (c *CardTypeClient) Get(ctx context.Context, id int) (*CardType, error) {
	return c.Query().Where(cardtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardTypeClient) GetX(ctx context.Context, id int) *CardType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a CardType.
func (c *CardTypeClient) QueryCards(ct *CardType) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cardtype.Table, cardtype.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cardtype.CardsTable, cardtype.CardsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardTypeClient) Hooks() []Hook {
	return c.hooks.CardType
}

// ColorClient is a client for the Color schema.
type ColorClient struct {
	config
}

// NewColorClient returns a client for the Color from the given config.
func NewColorClient(c config) *ColorClient {
	return &ColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `color.Hooks(f(g(h())))`.
func (c *ColorClient) Use(hooks ...Hook) {
	c.hooks.Color = append(c.hooks.Color, hooks...)
}

// Create returns a create builder for Color.
func (c *ColorClient) Create() *ColorCreate {
	mutation := newColorMutation(c.config, OpCreate)
	return &ColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Color entities.
func (c *ColorClient) CreateBulk(builders ...*ColorCreate) *ColorCreateBulk {
	return &ColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Color.
func (c *ColorClient) Update() *ColorUpdate {
	mutation := newColorMutation(c.config, OpUpdate)
	return &ColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColorClient) UpdateOne(co *Color) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColor(co))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColorClient) UpdateOneID(id int) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColorID(id))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Color.
func (c *ColorClient) Delete() *ColorDelete {
	mutation := newColorMutation(c.config, OpDelete)
	return &ColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ColorClient) DeleteOne(co *Color) *ColorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ColorClient) DeleteOneID(id int) *ColorDeleteOne {
	builder := c.Delete().Where(color.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColorDeleteOne{builder}
}

// Query returns a query builder for Color.
func (c *ColorClient) Query() *ColorQuery {
	return &ColorQuery{
		config: c.config,
	}
}

// Get returns a Color entity by its id.
func (c *ColorClient) Get(ctx context.Context, id int) (*Color, error) {
	return c.Query().Where(color.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColorClient) GetX(ctx context.Context, id int) *Color {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Color.
func (c *ColorClient) QueryCards(co *Color) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, color.CardsTable, color.CardsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColorClient) Hooks() []Hook {
	return c.hooks.Color
}

// DeckClient is a client for the Deck schema.
type DeckClient struct {
	config
}

// NewDeckClient returns a client for the Deck from the given config.
func NewDeckClient(c config) *DeckClient {
	return &DeckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deck.Hooks(f(g(h())))`.
func (c *DeckClient) Use(hooks ...Hook) {
	c.hooks.Deck = append(c.hooks.Deck, hooks...)
}

// Create returns a create builder for Deck.
func (c *DeckClient) Create() *DeckCreate {
	mutation := newDeckMutation(c.config, OpCreate)
	return &DeckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deck entities.
func (c *DeckClient) CreateBulk(builders ...*DeckCreate) *DeckCreateBulk {
	return &DeckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deck.
func (c *DeckClient) Update() *DeckUpdate {
	mutation := newDeckMutation(c.config, OpUpdate)
	return &DeckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeckClient) UpdateOne(d *Deck) *DeckUpdateOne {
	mutation := newDeckMutation(c.config, OpUpdateOne, withDeck(d))
	return &DeckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeckClient) UpdateOneID(id int) *DeckUpdateOne {
	mutation := newDeckMutation(c.config, OpUpdateOne, withDeckID(id))
	return &DeckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deck.
func (c *DeckClient) Delete() *DeckDelete {
	mutation := newDeckMutation(c.config, OpDelete)
	return &DeckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeckClient) DeleteOne(d *Deck) *DeckDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeckClient) DeleteOneID(id int) *DeckDeleteOne {
	builder := c.Delete().Where(deck.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeckDeleteOne{builder}
}

// Query returns a query builder for Deck.
func (c *DeckClient) Query() *DeckQuery {
	return &DeckQuery{
		config: c.config,
	}
}

// Get returns a Deck entity by its id.
func (c *DeckClient) Get(ctx context.Context, id int) (*Deck, error) {
	return c.Query().Where(deck.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeckClient) GetX(ctx context.Context, id int) *Deck {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Deck.
func (c *DeckClient) QueryCards(d *Deck) *DeckCardQuery {
	query := &DeckCardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deck.Table, deck.FieldID, id),
			sqlgraph.To(deckcard.Table, deckcard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deck.CardsTable, deck.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeckClient) Hooks() []Hook {
	return c.hooks.Deck
}

// DeckCardClient is a client for the DeckCard schema.
type DeckCardClient struct {
	config
}

// NewDeckCardClient returns a client for the DeckCard from the given config.
func NewDeckCardClient(c config) *DeckCardClient {
	return &DeckCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deckcard.Hooks(f(g(h())))`.
func (c *DeckCardClient) Use(hooks ...Hook) {
	c.hooks.DeckCard = append(c.hooks.DeckCard, hooks...)
}

// Create returns a create builder for DeckCard.
func (c *DeckCardClient) Create() *DeckCardCreate {
	mutation := newDeckCardMutation(c.config, OpCreate)
	return &DeckCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeckCard entities.
func (c *DeckCardClient) CreateBulk(builders ...*DeckCardCreate) *DeckCardCreateBulk {
	return &DeckCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeckCard.
func (c *DeckCardClient) Update() *DeckCardUpdate {
	mutation := newDeckCardMutation(c.config, OpUpdate)
	return &DeckCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeckCardClient) UpdateOne(dc *DeckCard) *DeckCardUpdateOne {
	mutation := newDeckCardMutation(c.config, OpUpdateOne, withDeckCard(dc))
	return &DeckCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeckCardClient) UpdateOneID(id int) *DeckCardUpdateOne {
	mutation := newDeckCardMutation(c.config, OpUpdateOne, withDeckCardID(id))
	return &DeckCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeckCard.
func (c *DeckCardClient) Delete() *DeckCardDelete {
	mutation := newDeckCardMutation(c.config, OpDelete)
	return &DeckCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeckCardClient) DeleteOne(dc *DeckCard) *DeckCardDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeckCardClient) DeleteOneID(id int) *DeckCardDeleteOne {
	builder := c.Delete().Where(deckcard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeckCardDeleteOne{builder}
}

// Query returns a query builder for DeckCard.
func (c *DeckCardClient) Query() *DeckCardQuery {
	return &DeckCardQuery{
		config: c.config,
	}
}

// Get returns a DeckCard entity by its id.
func (c *DeckCardClient) Get(ctx context.Context, id int) (*DeckCard, error) {
	return c.Query().Where(deckcard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeckCardClient) GetX(ctx context.Context, id int) *DeckCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeck queries the deck edge of a DeckCard.
func (c *DeckCardClient) QueryDeck(dc *DeckCard) *DeckQuery {
	query := &DeckQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deckcard.Table, deckcard.FieldID, id),
			sqlgraph.To(deck.Table, deck.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deckcard.DeckTable, deckcard.DeckColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCard queries the card edge of a DeckCard.
func (c *DeckCardClient) QueryCard(dc *DeckCard) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deckcard.Table, deckcard.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deckcard.CardTable, deckcard.CardColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeckCardClient) Hooks() []Hook {
	return c.hooks.DeckCard
}

// RulingClient is a client for the Ruling schema.
type RulingClient struct {
	config
}

// NewRulingClient returns a client for the Ruling from the given config.
func NewRulingClient(c config) *RulingClient {
	return &RulingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ruling.Hooks(f(g(h())))`.
func (c *RulingClient) Use(hooks ...Hook) {
	c.hooks.Ruling = append(c.hooks.Ruling, hooks...)
}

// Create returns a create builder for Ruling.
func (c *RulingClient) Create() *RulingCreate {
	mutation := newRulingMutation(c.config, OpCreate)
	return &RulingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ruling entities.
func (c *RulingClient) CreateBulk(builders ...*RulingCreate) *RulingCreateBulk {
	return &RulingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ruling.
func (c *RulingClient) Update() *RulingUpdate {
	mutation := newRulingMutation(c.config, OpUpdate)
	return &RulingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RulingClient) UpdateOne(r *Ruling) *RulingUpdateOne {
	mutation := newRulingMutation(c.config, OpUpdateOne, withRuling(r))
	return &RulingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RulingClient) UpdateOneID(id int) *RulingUpdateOne {
	mutation := newRulingMutation(c.config, OpUpdateOne, withRulingID(id))
	return &RulingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ruling.
func (c *RulingClient) Delete() *RulingDelete {
	mutation := newRulingMutation(c.config, OpDelete)
	return &RulingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RulingClient) DeleteOne(r *Ruling) *RulingDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RulingClient) DeleteOneID(id int) *RulingDeleteOne {
	builder := c.Delete().Where(ruling.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RulingDeleteOne{builder}
}

// Query returns a query builder for Ruling.
func (c *RulingClient) Query() *RulingQuery {
	return &RulingQuery{
		config: c.config,
	}
}

// Get returns a Ruling entity by its id.
func (c *RulingClient) Get(ctx context.Context, id int) (*Ruling, error) {
	return c.Query().Where(ruling.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RulingClient) GetX(ctx context.Context, id int) *Ruling {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCard queries the card edge of a Ruling.
func (c *RulingClient) QueryCard(r *Ruling) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ruling.Table, ruling.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ruling.CardTable, ruling.CardColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RulingClient) Hooks() []Hook {
	return c.hooks.Ruling
}

// SetClient is a client for the Set schema.
type SetClient struct {
	config
}

// NewSetClient returns a client for the Set from the given config.
func NewSetClient(c config) *SetClient {
	return &SetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `set.Hooks(f(g(h())))`.
func (c *SetClient) Use(hooks ...Hook) {
	c.hooks.Set = append(c.hooks.Set, hooks...)
}

// Create returns a create builder for Set.
func (c *SetClient) Create() *SetCreate {
	mutation := newSetMutation(c.config, OpCreate)
	return &SetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Set entities.
func (c *SetClient) CreateBulk(builders ...*SetCreate) *SetCreateBulk {
	return &SetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Set.
func (c *SetClient) Update() *SetUpdate {
	mutation := newSetMutation(c.config, OpUpdate)
	return &SetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SetClient) UpdateOne(s *Set) *SetUpdateOne {
	mutation := newSetMutation(c.config, OpUpdateOne, withSet(s))
	return &SetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SetClient) UpdateOneID(id int) *SetUpdateOne {
	mutation := newSetMutation(c.config, OpUpdateOne, withSetID(id))
	return &SetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Set.
func (c *SetClient) Delete() *SetDelete {
	mutation := newSetMutation(c.config, OpDelete)
	return &SetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SetClient) DeleteOne(s *Set) *SetDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SetClient) DeleteOneID(id int) *SetDeleteOne {
	builder := c.Delete().Where(set.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SetDeleteOne{builder}
}

// Query returns a query builder for Set.
func (c *SetClient) Query() *SetQuery {
	return &SetQuery{
		config: c.config,
	}
}

// Get returns a Set entity by its id.
func (c *SetClient) Get(ctx context.Context, id int) (*Set, error) {
	return c.Query().Where(set.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SetClient) GetX(ctx context.Context, id int) *Set {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Set.
func (c *SetClient) QueryCards(s *Set) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(set.Table, set.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, set.CardsTable, set.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SetClient) Hooks() []Hook {
	return c.hooks.Set
}

// SubTypeClient is a client for the SubType schema.
type SubTypeClient struct {
	config
}

// NewSubTypeClient returns a client for the SubType from the given config.
func NewSubTypeClient(c config) *SubTypeClient {
	return &SubTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subtype.Hooks(f(g(h())))`.
func (c *SubTypeClient) Use(hooks ...Hook) {
	c.hooks.SubType = append(c.hooks.SubType, hooks...)
}

// Create returns a create builder for SubType.
func (c *SubTypeClient) Create() *SubTypeCreate {
	mutation := newSubTypeMutation(c.config, OpCreate)
	return &SubTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubType entities.
func (c *SubTypeClient) CreateBulk(builders ...*SubTypeCreate) *SubTypeCreateBulk {
	return &SubTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubType.
func (c *SubTypeClient) Update() *SubTypeUpdate {
	mutation := newSubTypeMutation(c.config, OpUpdate)
	return &SubTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubTypeClient) UpdateOne(st *SubType) *SubTypeUpdateOne {
	mutation := newSubTypeMutation(c.config, OpUpdateOne, withSubType(st))
	return &SubTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubTypeClient) UpdateOneID(id int) *SubTypeUpdateOne {
	mutation := newSubTypeMutation(c.config, OpUpdateOne, withSubTypeID(id))
	return &SubTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubType.
func (c *SubTypeClient) Delete() *SubTypeDelete {
	mutation := newSubTypeMutation(c.config, OpDelete)
	return &SubTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SubTypeClient) DeleteOne(st *SubType) *SubTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SubTypeClient) DeleteOneID(id int) *SubTypeDeleteOne {
	builder := c.Delete().Where(subtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubTypeDeleteOne{builder}
}

// Query returns a query builder for SubType.
func (c *SubTypeClient) Query() *SubTypeQuery {
	return &SubTypeQuery{
		config: c.config,
	}
}

// Get returns a SubType entity by its id.
func (c *SubTypeClient) Get(ctx context.Context, id int) (*SubType, error) {
	return c.Query().Where(subtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubTypeClient) GetX(ctx context.Context, id int) *SubType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a SubType.
func (c *SubTypeClient) QueryCards(st *SubType) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtype.Table, subtype.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subtype.CardsTable, subtype.CardsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubTypeClient) Hooks() []Hook {
	return c.hooks.SubType
}

// SuperTypeClient is a client for the SuperType schema.
type SuperTypeClient struct {
	config
}

// NewSuperTypeClient returns a client for the SuperType from the given config.
func NewSuperTypeClient(c config) *SuperTypeClient {
	return &SuperTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `supertype.Hooks(f(g(h())))`.
func (c *SuperTypeClient) Use(hooks ...Hook) {
	c.hooks.SuperType = append(c.hooks.SuperType, hooks...)
}

// Create returns a create builder for SuperType.
func (c *SuperTypeClient) Create() *SuperTypeCreate {
	mutation := newSuperTypeMutation(c.config, OpCreate)
	return &SuperTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SuperType entities.
func (c *SuperTypeClient) CreateBulk(builders ...*SuperTypeCreate) *SuperTypeCreateBulk {
	return &SuperTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SuperType.
func (c *SuperTypeClient) Update() *SuperTypeUpdate {
	mutation := newSuperTypeMutation(c.config, OpUpdate)
	return &SuperTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SuperTypeClient) UpdateOne(st *SuperType) *SuperTypeUpdateOne {
	mutation := newSuperTypeMutation(c.config, OpUpdateOne, withSuperType(st))
	return &SuperTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SuperTypeClient) UpdateOneID(id int) *SuperTypeUpdateOne {
	mutation := newSuperTypeMutation(c.config, OpUpdateOne, withSuperTypeID(id))
	return &SuperTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SuperType.
func (c *SuperTypeClient) Delete() *SuperTypeDelete {
	mutation := newSuperTypeMutation(c.config, OpDelete)
	return &SuperTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SuperTypeClient) DeleteOne(st *SuperType) *SuperTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SuperTypeClient) DeleteOneID(id int) *SuperTypeDeleteOne {
	builder := c.Delete().Where(supertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SuperTypeDeleteOne{builder}
}

// Query returns a query builder for SuperType.
func (c *SuperTypeClient) Query() *SuperTypeQuery {
	return &SuperTypeQuery{
		config: c.config,
	}
}

// Get returns a SuperType entity by its id.
func (c *SuperTypeClient) Get(ctx context.Context, id int) (*SuperType, error) {
	return c.Query().Where(supertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SuperTypeClient) GetX(ctx context.Context, id int) *SuperType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a SuperType.
func (c *SuperTypeClient) QueryCards(st *SuperType) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(supertype.Table, supertype.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, supertype.CardsTable, supertype.CardsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SuperTypeClient) Hooks() []Hook {
	return c.hooks.SuperType
}
