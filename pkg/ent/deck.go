// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/magicman/pkg/ent/deck"
)

// Deck is the model entity for the Deck schema.
type Deck struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeckQuery when eager-loading is set.
	Edges DeckEdges `json:"edges"`
}

// DeckEdges holds the relations/edges for other nodes in the graph.
type DeckEdges struct {
	// Cards holds the value of the cards edge.
	Cards []*DeckCard `json:"cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CardsOrErr returns the Cards value or an error if the edge
// was not loaded in eager-loading.
func (e DeckEdges) CardsOrErr() ([]*DeckCard, error) {
	if e.loadedTypes[0] {
		return e.Cards, nil
	}
	return nil, &NotLoadedError{edge: "cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deck) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deck.FieldID:
			values[i] = new(sql.NullInt64)
		case deck.FieldName, deck.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deck", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deck fields.
func (d *Deck) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deck.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case deck.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case deck.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		}
	}
	return nil
}

// QueryCards queries the "cards" edge of the Deck entity.
func (d *Deck) QueryCards() *DeckCardQuery {
	return (&DeckClient{config: d.config}).QueryCards(d)
}

// Update returns a builder for updating this Deck.
// Note that you need to call Deck.Unwrap() before calling this method if this Deck
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deck) Update() *DeckUpdateOne {
	return (&DeckClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Deck entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deck) Unwrap() *Deck {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deck is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deck) String() string {
	var builder strings.Builder
	builder.WriteString("Deck(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", description=")
	builder.WriteString(d.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Decks is a parsable slice of Deck.
type Decks []*Deck

func (d Decks) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
