// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/deck"
	"github.com/SethCurry/magicman/pkg/ent/deckcard"
)

// DeckCard is the model entity for the DeckCard schema.
type DeckCard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeckCardQuery when eager-loading is set.
	Edges           DeckCardEdges `json:"edges"`
	card_deck_cards *int
	deck_cards      *int
}

// DeckCardEdges holds the relations/edges for other nodes in the graph.
type DeckCardEdges struct {
	// Deck holds the value of the deck edge.
	Deck *Deck `json:"deck,omitempty"`
	// Card holds the value of the card edge.
	Card *Card `json:"card,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DeckOrErr returns the Deck value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeckCardEdges) DeckOrErr() (*Deck, error) {
	if e.loadedTypes[0] {
		if e.Deck == nil {
			// The edge deck was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deck.Label}
		}
		return e.Deck, nil
	}
	return nil, &NotLoadedError{edge: "deck"}
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeckCardEdges) CardOrErr() (*Card, error) {
	if e.loadedTypes[1] {
		if e.Card == nil {
			// The edge card was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: card.Label}
		}
		return e.Card, nil
	}
	return nil, &NotLoadedError{edge: "card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeckCard) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deckcard.FieldID, deckcard.FieldCount:
			values[i] = new(sql.NullInt64)
		case deckcard.ForeignKeys[0]: // card_deck_cards
			values[i] = new(sql.NullInt64)
		case deckcard.ForeignKeys[1]: // deck_cards
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeckCard", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeckCard fields.
func (dc *DeckCard) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deckcard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case deckcard.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				dc.Count = int(value.Int64)
			}
		case deckcard.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field card_deck_cards", value)
			} else if value.Valid {
				dc.card_deck_cards = new(int)
				*dc.card_deck_cards = int(value.Int64)
			}
		case deckcard.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deck_cards", value)
			} else if value.Valid {
				dc.deck_cards = new(int)
				*dc.deck_cards = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDeck queries the "deck" edge of the DeckCard entity.
func (dc *DeckCard) QueryDeck() *DeckQuery {
	return (&DeckCardClient{config: dc.config}).QueryDeck(dc)
}

// QueryCard queries the "card" edge of the DeckCard entity.
func (dc *DeckCard) QueryCard() *CardQuery {
	return (&DeckCardClient{config: dc.config}).QueryCard(dc)
}

// Update returns a builder for updating this DeckCard.
// Note that you need to call DeckCard.Unwrap() before calling this method if this DeckCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DeckCard) Update() *DeckCardUpdateOne {
	return (&DeckCardClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the DeckCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DeckCard) Unwrap() *DeckCard {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeckCard is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DeckCard) String() string {
	var builder strings.Builder
	builder.WriteString("DeckCard(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", dc.Count))
	builder.WriteByte(')')
	return builder.String()
}

// DeckCards is a parsable slice of DeckCard.
type DeckCards []*DeckCard

func (dc DeckCards) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
