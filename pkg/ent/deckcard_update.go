// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SethCurry/magicman/pkg/ent/card"
	"github.com/SethCurry/magicman/pkg/ent/deck"
	"github.com/SethCurry/magicman/pkg/ent/deckcard"
	"github.com/SethCurry/magicman/pkg/ent/predicate"
)

// DeckCardUpdate is the builder for updating DeckCard entities.
type DeckCardUpdate struct {
	config
	hooks    []Hook
	mutation *DeckCardMutation
}

// Where appends a list predicates to the DeckCardUpdate builder.
func (dcu *DeckCardUpdate) Where(ps ...predicate.DeckCard) *DeckCardUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetCount sets the "count" field.
func (dcu *DeckCardUpdate) SetCount(i int) *DeckCardUpdate {
	dcu.mutation.ResetCount()
	dcu.mutation.SetCount(i)
	return dcu
}

// AddCount adds i to the "count" field.
func (dcu *DeckCardUpdate) AddCount(i int) *DeckCardUpdate {
	dcu.mutation.AddCount(i)
	return dcu
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (dcu *DeckCardUpdate) SetDeckID(id int) *DeckCardUpdate {
	dcu.mutation.SetDeckID(id)
	return dcu
}

// SetNillableDeckID sets the "deck" edge to the Deck entity by ID if the given value is not nil.
func (dcu *DeckCardUpdate) SetNillableDeckID(id *int) *DeckCardUpdate {
	if id != nil {
		dcu = dcu.SetDeckID(*id)
	}
	return dcu
}

// SetDeck sets the "deck" edge to the Deck entity.
func (dcu *DeckCardUpdate) SetDeck(d *Deck) *DeckCardUpdate {
	return dcu.SetDeckID(d.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (dcu *DeckCardUpdate) SetCardID(id int) *DeckCardUpdate {
	dcu.mutation.SetCardID(id)
	return dcu
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (dcu *DeckCardUpdate) SetNillableCardID(id *int) *DeckCardUpdate {
	if id != nil {
		dcu = dcu.SetCardID(*id)
	}
	return dcu
}

// SetCard sets the "card" edge to the Card entity.
func (dcu *DeckCardUpdate) SetCard(c *Card) *DeckCardUpdate {
	return dcu.SetCardID(c.ID)
}

// Mutation returns the DeckCardMutation object of the builder.
func (dcu *DeckCardUpdate) Mutation() *DeckCardMutation {
	return dcu.mutation
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (dcu *DeckCardUpdate) ClearDeck() *DeckCardUpdate {
	dcu.mutation.ClearDeck()
	return dcu
}

// ClearCard clears the "card" edge to the Card entity.
func (dcu *DeckCardUpdate) ClearCard() *DeckCardUpdate {
	dcu.mutation.ClearCard()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeckCardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dcu.hooks) == 0 {
		if err = dcu.check(); err != nil {
			return 0, err
		}
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeckCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcu.check(); err != nil {
				return 0, err
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			if dcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeckCardUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeckCardUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeckCardUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DeckCardUpdate) check() error {
	if v, ok := dcu.mutation.Count(); ok {
		if err := deckcard.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf("ent: validator failed for field \"count\": %w", err)}
		}
	}
	return nil
}

func (dcu *DeckCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deckcard.Table,
			Columns: deckcard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deckcard.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deckcard.FieldCount,
		})
	}
	if value, ok := dcu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deckcard.FieldCount,
		})
	}
	if dcu.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.DeckTable,
			Columns: []string{deckcard.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.DeckTable,
			Columns: []string{deckcard.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.CardTable,
			Columns: []string{deckcard.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.CardTable,
			Columns: []string{deckcard.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deckcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeckCardUpdateOne is the builder for updating a single DeckCard entity.
type DeckCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeckCardMutation
}

// SetCount sets the "count" field.
func (dcuo *DeckCardUpdateOne) SetCount(i int) *DeckCardUpdateOne {
	dcuo.mutation.ResetCount()
	dcuo.mutation.SetCount(i)
	return dcuo
}

// AddCount adds i to the "count" field.
func (dcuo *DeckCardUpdateOne) AddCount(i int) *DeckCardUpdateOne {
	dcuo.mutation.AddCount(i)
	return dcuo
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (dcuo *DeckCardUpdateOne) SetDeckID(id int) *DeckCardUpdateOne {
	dcuo.mutation.SetDeckID(id)
	return dcuo
}

// SetNillableDeckID sets the "deck" edge to the Deck entity by ID if the given value is not nil.
func (dcuo *DeckCardUpdateOne) SetNillableDeckID(id *int) *DeckCardUpdateOne {
	if id != nil {
		dcuo = dcuo.SetDeckID(*id)
	}
	return dcuo
}

// SetDeck sets the "deck" edge to the Deck entity.
func (dcuo *DeckCardUpdateOne) SetDeck(d *Deck) *DeckCardUpdateOne {
	return dcuo.SetDeckID(d.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (dcuo *DeckCardUpdateOne) SetCardID(id int) *DeckCardUpdateOne {
	dcuo.mutation.SetCardID(id)
	return dcuo
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (dcuo *DeckCardUpdateOne) SetNillableCardID(id *int) *DeckCardUpdateOne {
	if id != nil {
		dcuo = dcuo.SetCardID(*id)
	}
	return dcuo
}

// SetCard sets the "card" edge to the Card entity.
func (dcuo *DeckCardUpdateOne) SetCard(c *Card) *DeckCardUpdateOne {
	return dcuo.SetCardID(c.ID)
}

// Mutation returns the DeckCardMutation object of the builder.
func (dcuo *DeckCardUpdateOne) Mutation() *DeckCardMutation {
	return dcuo.mutation
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (dcuo *DeckCardUpdateOne) ClearDeck() *DeckCardUpdateOne {
	dcuo.mutation.ClearDeck()
	return dcuo
}

// ClearCard clears the "card" edge to the Card entity.
func (dcuo *DeckCardUpdateOne) ClearCard() *DeckCardUpdateOne {
	dcuo.mutation.ClearCard()
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeckCardUpdateOne) Select(field string, fields ...string) *DeckCardUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeckCard entity.
func (dcuo *DeckCardUpdateOne) Save(ctx context.Context) (*DeckCard, error) {
	var (
		err  error
		node *DeckCard
	)
	if len(dcuo.hooks) == 0 {
		if err = dcuo.check(); err != nil {
			return nil, err
		}
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeckCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcuo.check(); err != nil {
				return nil, err
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			if dcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeckCardUpdateOne) SaveX(ctx context.Context) *DeckCard {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeckCardUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeckCardUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DeckCardUpdateOne) check() error {
	if v, ok := dcuo.mutation.Count(); ok {
		if err := deckcard.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf("ent: validator failed for field \"count\": %w", err)}
		}
	}
	return nil
}

func (dcuo *DeckCardUpdateOne) sqlSave(ctx context.Context) (_node *DeckCard, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deckcard.Table,
			Columns: deckcard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deckcard.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeckCard.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deckcard.FieldID)
		for _, f := range fields {
			if !deckcard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deckcard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deckcard.FieldCount,
		})
	}
	if value, ok := dcuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deckcard.FieldCount,
		})
	}
	if dcuo.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.DeckTable,
			Columns: []string{deckcard.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.DeckTable,
			Columns: []string{deckcard.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.CardTable,
			Columns: []string{deckcard.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckcard.CardTable,
			Columns: []string{deckcard.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeckCard{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deckcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
