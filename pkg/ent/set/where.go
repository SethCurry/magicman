// Code generated by entc, DO NOT EDIT.

package set

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SethCurry/magicman/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Border applies equality check predicate on the "border" field. It's identical to BorderEQ.
func Border(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorder), v))
	})
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// BorderEQ applies the EQ predicate on the "border" field.
func BorderEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBorder), v))
	})
}

// BorderNEQ applies the NEQ predicate on the "border" field.
func BorderNEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBorder), v))
	})
}

// BorderIn applies the In predicate on the "border" field.
func BorderIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBorder), v...))
	})
}

// BorderNotIn applies the NotIn predicate on the "border" field.
func BorderNotIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBorder), v...))
	})
}

// BorderGT applies the GT predicate on the "border" field.
func BorderGT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBorder), v))
	})
}

// BorderGTE applies the GTE predicate on the "border" field.
func BorderGTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBorder), v))
	})
}

// BorderLT applies the LT predicate on the "border" field.
func BorderLT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBorder), v))
	})
}

// BorderLTE applies the LTE predicate on the "border" field.
func BorderLTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBorder), v))
	})
}

// BorderContains applies the Contains predicate on the "border" field.
func BorderContains(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBorder), v))
	})
}

// BorderHasPrefix applies the HasPrefix predicate on the "border" field.
func BorderHasPrefix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBorder), v))
	})
}

// BorderHasSuffix applies the HasSuffix predicate on the "border" field.
func BorderHasSuffix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBorder), v))
	})
}

// BorderEqualFold applies the EqualFold predicate on the "border" field.
func BorderEqualFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBorder), v))
	})
}

// BorderContainsFold applies the ContainsFold predicate on the "border" field.
func BorderContainsFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBorder), v))
	})
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...string) predicate.Set {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Set(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateContains applies the Contains predicate on the "release_date" field.
func ReleaseDateContains(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateHasPrefix applies the HasPrefix predicate on the "release_date" field.
func ReleaseDateHasPrefix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateHasSuffix applies the HasSuffix predicate on the "release_date" field.
func ReleaseDateHasSuffix(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateEqualFold applies the EqualFold predicate on the "release_date" field.
func ReleaseDateEqualFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateContainsFold applies the ContainsFold predicate on the "release_date" field.
func ReleaseDateContainsFold(v string) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReleaseDate), v))
	})
}

// HasCards applies the HasEdge predicate on the "cards" edge.
func HasCards() predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardsWith applies the HasEdge predicate on the "cards" edge with a given conditions (other predicates).
func HasCardsWith(preds ...predicate.Card) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Set) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Set) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Set) predicate.Set {
	return predicate.Set(func(s *sql.Selector) {
		p(s.Not())
	})
}
